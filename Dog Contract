pragma solidity >=0.4.0 <0.6.0;

// Contract that creates transferrable data. In this case, we create a Dog struct with values of a name and an age

contract DogContract {
    
    struct Dog {
        string name;
        uint age;
    }
    
    address owner;
    
    mapping(address => Dog) ownerToDog;
    
    modifier onlyNewOwners() {
        require(ownerToDog[msg.sender].age == 0);
        _;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    constructor() public{
        owner = msg.sender;
    }
    
    function addDog(string memory _name, uint _age) public onlyNewOwners {
        Dog memory currentDog = Dog(_name, _age);
        ownerToDog[msg.sender] = currentDog;
    }
    
    function getDog() public view returns(string memory) {
        return ownerToDog[msg.sender].name;
    }
    
    function deleteDog(address _address) public onlyOwner {
        delete ownerToDog[_address]; // only owner of contract can delete dog
    }
}


// Owner Modifier - IvanonTech


/* BUG IN CONTRACT BELOW, FIXED ABOVE

pragma solidity >=0.4.0 <0.6.0;

contract DogContract {
    
    struct Dog {
        string name;
        uint age;
    }
    
    address owner;
    
    mapping(address => Dog) ownerToDog;
    
    modifier onlyNewOwners() {
        require(ownerToDog[msg.sender].age == 0);
        _;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    constructor() public{
        owner = msg.sender;
    }
    
    function addDog(string memory _name, uint _age) public onlyNewOwners {
        Dog memory currentDog = Dog(_name, _age);
        ownerToDog[msg.sender] = currentDog;
    }
    
    function getDog() public view returns(string memory) {
        address owner = msg.sender;
        return ownerToDog[owner].name;
    }
    
    function deleteDog(address _address) public onlyOwner {
        delete ownerToDog[_address];
    }
}


*/
